C51 COMPILER V9.54   MAIN                                                                  06/21/2025 22:47:29 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.l
                    -st) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H> // STC89C52单片机寄存器定义头文件
   2          #include "datatype.h" // 数据类型定义
   3          #include "Delay.h"    // 延时函数声明
   4          #include "OLED.h"     // OLED显示相关函数声明
   5          #include "my_interrupt.h" // 中断初始化函数声明
   6          #include "OLED_show.h"    // OLED显示界面相关函数声明
   7          
   8          uint8_t start_flag=0; // 启动标志位
   9          
  10          void main(){
  11   1              // 初始化OLED显示
  12   1              OLED_Init();
  13   1              OLED_Clear_(); // 全屏点亮
  14   1              OLED_Clear();  // 清屏
  15   1      
  16   1              oled_show_init(); // OLED界面变量初始化
  17   1              
  18   1              Interrupt_Init(); // 初始化定时器和中断
  19   1              while(1){
  20   2                      if(Oled_num_show_flag){ // 数值更新标志
  21   3                              Oled_num_show_flag=0;
  22   3                              oled_num_show(); // 刷新当前行数值
  23   3                      }
  24   2                      if(Oled_host_flag){ // 主界面刷新标志
  25   3                              oled_show(); // 刷新主界面
  26   3                              Oled_host_flag=0;
  27   3                      }               
  28   2              }
  29   1      }
  30          
  31          // 外部中断1服务函数，按键1处理
  32          void INT1_ISR() interrupt 2 {
  33   1              bit key1=1,key1_last=1;
  34   1              Delay(20); // 消抖
  35   1              key1=0;
  36   1              while(P3_3==0); // 等待按键松开
  37   1              Delay(20); // 消抖
  38   1              IE1=0; // 防止再次进中断
  39   1              
  40   1              if( key1==0 && key1_last==1 ){
  41   2                      // key1按下逻辑,进入设置界面 设置频率和占空比
  42   2                      Oled_set_flag[Oled_line_num]++;
  43   2                      Oled_set_flag[Oled_line_num]%=3;
  44   2                      TR2=0; // 关闭频率输出
  45   2                      Oled_host_flag=1; // 刷新主界面
  46   2              }
  47   1              key1_last=key1;
  48   1      }
  49          
  50          // 定时器0中断服务函数，10ms周期，处理按键2/3/4
  51          void Timer0_ISR(void) interrupt 1{
  52   1              static uint8_t KeyTick=0;
  53   1              static uint8_t key2=1,key3=1,key4=1;
  54   1              static uint8_t key2_last=1,key3_last=1,key4_last=1;
C51 COMPILER V9.54   MAIN                                                                  06/21/2025 22:47:29 PAGE 2   

  55   1              static uint8_t time_num;
  56   1              TL0 = 0x00; // 设置定时初值
  57   1              TH0 = 0xB8; // 设置定时初值     
  58   1              
  59   1          TF2 = 0; // 手动清除溢出标志
  60   1              
  61   1              KeyTick++;
  62   1              
  63   1              if(KeyTick==1){ // 按键key2~4判定
  64   2                      KeyTick=0;
  65   2                      
  66   2                      key2=P3_4; // 读取按键2
  67   2                      key3=P3_6; // 读取按键3
  68   2                      key4=P3_7; // 读取按键4
  69   2                      if(key2==0&&key2_last==1){ // key2按下
  70   3                              if(Oled_set_flag[Oled_line_num]==1){
  71   4                                      Oled_fre[Oled_line_num]++; // 频率+
  72   4                              }
  73   3                              else if(Oled_set_flag[Oled_line_num]==2){
  74   4                                      Oled_duty_cycle[Oled_line_num]++;
  75   4                                      if(Oled_duty_cycle[Oled_line_num]>100){
  76   5                                      Oled_duty_cycle[Oled_line_num]=0;
  77   5                                      }
  78   4                              }else{
  79   4                                      Oled_line_num++;
  80   4                                      if(Oled_line_num>3){Oled_line_num=0;}                   
  81   4                              }                               
  82   3                      }
  83   2                      if(key3==0&&key3_last==1){ // key3按下
  84   3                              if(Oled_set_flag[Oled_line_num]==1){
  85   4                                      Oled_fre[Oled_line_num]--; // 频率-
  86   4                              }
  87   3                              else if(Oled_set_flag[Oled_line_num]==2){
  88   4                                      Oled_duty_cycle[Oled_line_num]--;
  89   4                                      if(Oled_duty_cycle[Oled_line_num]>100){
  90   5                                      Oled_duty_cycle[Oled_line_num]=100;
  91   5                                      }
  92   4                              }else{
  93   4                                      Oled_line_num--;
  94   4                                      if(Oled_line_num>3){Oled_line_num=3;}                   
  95   4                              }       
  96   3                      }
  97   2                      if(key4==0&&key4_last==1){ // key4按下
  98   3                              TR2=~TR2; // 频率输出开关
  99   3                              if(TR2==0){
 100   4                                      P1=0xff;
 101   4                                      // 重新进入设置阶段，清除Oled_set_flag
 102   4                                      Oled_set_flag[0]=0;
 103   4                                      Oled_set_flag[1]=0;
 104   4                                      Oled_set_flag[2]=0;
 105   4                                      Oled_set_flag[3]=0;
 106   4                              }else{
 107   4                                      start_flag=1;
 108   4                              }
 109   3                      }//key4按下 打开频率输出
 110   2                      // 长按判定 2s time_num=100;
 111   2                      if(key2==0&&key2_last==0){
 112   3                              time_num++;
 113   3                              if(time_num>100){
 114   4                                      if(Oled_set_flag[Oled_line_num]==1){
 115   5                                              Oled_fre[Oled_line_num]++; // 长按频率+
 116   5                                      }
C51 COMPILER V9.54   MAIN                                                                  06/21/2025 22:47:29 PAGE 3   

 117   4                                      else if(Oled_set_flag[Oled_line_num]==2){
 118   5                                              Oled_duty_cycle[Oled_line_num]++;       
 119   5                                              if(Oled_duty_cycle[Oled_line_num]>100){
 120   6                                              Oled_duty_cycle[Oled_line_num]=0;
 121   6                                              }
 122   5                                      }
 123   4                                      Oled_num_show_flag=1; // 刷新数值
 124   4                              }
 125   3                      }
 126   2                      if(key3==0&&key3_last==0){
 127   3                              time_num++;
 128   3                              if(time_num>100){
 129   4                                      if(Oled_set_flag[Oled_line_num]==1){
 130   5                                              Oled_fre[Oled_line_num]--; // 长按频率-
 131   5                                      }
 132   4                                      else if(Oled_set_flag[Oled_line_num]==2){
 133   5                                              Oled_duty_cycle[Oled_line_num]--;       
 134   5                                              if(Oled_duty_cycle[Oled_line_num]>100){
 135   6                                              Oled_duty_cycle[Oled_line_num]=100;
 136   6                                              }
 137   5                                      }
 138   4                                      Oled_num_show_flag=1; // 刷新数值
 139   4                              }
 140   3                      }
 141   2                      // 松手判定
 142   2                      if(key2==1&&key2_last==0){
 143   3                              time_num=0;
 144   3                              Oled_host_flag=1; // 刷新主界面
 145   3                      }
 146   2                      if(key3==1&&key3_last==0){
 147   3                              time_num=0;
 148   3                              Oled_host_flag=1; // 刷新主界面
 149   3                      }
 150   2                      key2_last=key2;
 151   2                      key3_last=key3;
 152   2                      key4_last=key4;
 153   2              }
 154   1      
 155   1      }
 156          
 157          // 设置频率输出端口电平
 158          void set_fre(uint8_t x, bit value) {
 159   1          switch (x) {
 160   2              case 0: P2_0 = value; break;
 161   2              case 1: P2_1 = value; break;
 162   2              case 2: P2_2 = value; break;
 163   2              case 3: P2_3 = value; break;
 164   2          }
 165   1      }
 166          
 167          // 定时器2中断服务函数，0.25ms采样，频率/占空比输出
 168          void Timer2_ISR() interrupt 5 {
 169   1              static uint16_t fre_num[4]; // 计数器
 170   1              static uint16_t _fre_num[4]; // 频率周期计数
 171   1              static uint16_t _duty_cycle_num[4]; // 占空比计数
 172   1              uint8_t i=0;
 173   1              P1=~P1; // 指示灯翻转
 174   1              if(TF2){
 175   2                      TF2 = 0; // 必须手动清除中断标志
 176   2                      if(start_flag){
 177   3                              start_flag=0;
 178   3                              for(i=0;i<4;i++){
C51 COMPILER V9.54   MAIN                                                                  06/21/2025 22:47:29 PAGE 4   

 179   4                                      _fre_num[i]=4000/Oled_fre[i]; // 计算周期
 180   4                                      _duty_cycle_num[i]=40*Oled_duty_cycle[i]/Oled_fre[i]; // 计算占空比
 181   4                              }
 182   3                      }
 183   2                      // ===== fre1~fre4输出 =====
 184   2                      for(i=0;i<4;i++){
 185   3                              fre_num[i]++;   // 计数
 186   3                              if(fre_num[i] >= _fre_num[i]) fre_num[i] = 0; // 到周期归零
 187   3                              if(fre_num[i] < _duty_cycle_num[i])
 188   3                                      set_fre(i,1); // 输出高电平
 189   3                              else
 190   3                                      set_fre(i,0); // 输出低电平
 191   3                      }
 192   2              }
 193   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    823    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     33    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
